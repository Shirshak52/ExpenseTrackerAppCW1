@page "/transactions"
@using ExpenseTracker.Models;
@using ExpenseTracker.Services;
@inject ITransactionService TransactionService;
@inject IDialogService DialogService
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations
@using System.Collections.Generic

<h1 class="text-center mb-5">My Transactions</h1>

<!-- Transactions View Start -->
<MudPaper Elevation="2" Class="p-4">

    <MudDataGrid Items="@(isAnyFilterApplied ? filteredTransactions : transactions)" SortMode="SortMode.Multiple" Filterable="true">
        
        <ToolBarContent>

            <!-- Tag Filter -->
            <MudSelect @bind-Value="_selectedTag" Label="Filter by Tag" Variant="Variant.Outlined" Class="mb-3" T="string">
                <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
                @foreach (var tag in tags)
                {
                    <MudSelectItem Value="@tag">@tag</MudSelectItem>
                }
            </MudSelect>

            <!-- Type Filter -->
            <MudSelect @bind-Value="_selectedType" Label="Filter by Type" Variant="Variant.Outlined" Class="mb-3" T="string">
                <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
                @foreach (var type in transactionTypes)
                {
                    <MudSelectItem Value="@type">@type</MudSelectItem>
                }
            </MudSelect>

            <!-- Reset Filters -->
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mb-3" OnClick="ResetFilters">
                Reset Filters
            </MudButton>

        </ToolBarContent>
        
        <Columns>
            <PropertyColumn Property="x => x.Title" Sortable="true" />
            <PropertyColumn Property="x => x.Type" Sortable="true" />
            <PropertyColumn Property="x => x.Amount" Sortable="true" />
            <PropertyColumn Property="x => x.Date" Title="Date" Sortable="true" Format="D" />
            <PropertyColumn Property="x => x.Tag" Sortable="true" />
            <PropertyColumn Property="x => x.Notes" Sortable="true" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Transaction" PageSizeOptions="[5, 10, 15, 20]" />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

<!-- Add New Transaction Form Start -->
<MudPaper Elevation="2" Class="p-4 mt-5">
    <!-- Form Header -->
    <MudText Typo="Typo.h6" Class="mb-4">Add New Transaction</MudText>

    <EditForm Model="@transaction" OnValidSubmit="AddNewTransaction">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@

        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Title" Variant="Variant.Outlined" @bind-Value="transaction.Title" Class="mb-3" Required="true" />
                <ValidationMessage For="@(() => transaction.Title)" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="@transaction.Type" Label="Type" Variant="Variant.Outlined" Required="true" Class="mb-3">
                    @foreach (var type in transactionTypes)
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>
                <ValidationMessage For="@(() => transaction.Type)" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudNumericField Label="Amount" Variant="Variant.Outlined" @bind-Value="transaction.Amount" Class="mb-3" Required="true" />
                <ValidationMessage For="@(() => transaction.Amount)" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Date (If not selected, today's date will be used)" Variant="Variant.Outlined" @bind-Date="transaction.Date" Class="mb-3" Required="true" />
                <ValidationMessage For="@(() => transaction.Date)" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="@transaction.Tag" Label="Tag" Variant="Variant.Outlined" Required="true" Class="mb-3">
                    @foreach (var tag in tags)
                    {
                        <MudSelectItem Value="@tag">@tag</MudSelectItem>
                    }
                </MudSelect>
                <ValidationMessage For="@(() => transaction.Tag)" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField Label="Notes" Variant="Variant.Outlined" @bind-Value="transaction.Notes" Multiline="true" Rows="3" Class="mb-3" />
                <ValidationMessage For="@(() => transaction.Notes)" />
            </MudItem>
        </MudGrid>

        <div class="text-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-3 px-5">
                Add Transaction
            </MudButton>
        </div>
    </EditForm>
</MudPaper>


@code {
    private Transaction transaction = new();

    private List<Transaction> transactions = new();

    private List<string> tags = new List<string>() { "Electricity", "Water Bill", "Petrol" };
    private List<string> transactionTypes = new List<string>() { "Debit", "Credit" };

    private string _selectedType;
    private string _selectedTag;
    private bool isAnyFilterApplied => !string.IsNullOrEmpty(_selectedTag) || !string.IsNullOrEmpty(_selectedType);

    private List<Transaction> filteredTransactions
    {
        get
        {
            return transactions
                .Where(t => (string.IsNullOrEmpty(_selectedTag) || t.Tag == _selectedTag) &&
                            (string.IsNullOrEmpty(_selectedType) || t.Type == _selectedType))
                .ToList();
        }
    }

    private void ResetFilters()
    {
        _selectedTag = string.Empty;
        _selectedType = string.Empty;
    }

    private void AddNewTransaction()
    {
        TransactionService.AddNewTransaction(transaction.Title,
            transaction.Type,
            transaction.Amount,
            transaction.Date,
            transaction.Tag,
            transaction.Notes
        );

        // Reload transactions list
        LoadTransactions();

        // Ensure UI is updated
        StateHasChanged();
    }

    private void LoadTransactions()
    {
        transactions = TransactionService.GetAllTransactions().ToList();
    }

    protected override void OnInitialized()
    {
        LoadTransactions();
    }
}
