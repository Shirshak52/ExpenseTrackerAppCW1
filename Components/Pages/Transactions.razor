@page "/transactions"
@using ExpenseTracker.Models;
@using ExpenseTracker.Services;
@inject ITransactionService TransactionService;
@inject IDebtService DebtService;
@inject IDialogService DialogService
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations
@using System.Collections.Generic

<!-- Datagrid for Transactions -->
<MudPaper Elevation="2" Class="p-4">

    <!-- Header -->
    <MudText Typo="Typo.h4" Class="text-center mb-5">My Transactions</MudText>

    <!-- If any filter is applied, show filtered transactions, else show all transactions -->
    <MudDataGrid Items="@(isAnyFilterApplied ? filteredTransactions : transactions)" SortMode="SortMode.Multiple" Filterable="true">
        
        <!-- Filtering buttons -->
        <ToolBarContent>

            <!-- Tag filter -->
            <MudSelect @bind-Value="_selectedTag" Label="Filter by Tag" Variant="Variant.Outlined" Class="mb-3" T="string">
                <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
                @foreach (var tag in tags)
                {
                    <MudSelectItem Value="@tag">@tag</MudSelectItem>
                }
            </MudSelect>

            <!-- Type filter -->
            <MudSelect @bind-Value="_selectedType" Label="Filter by Type" Variant="Variant.Outlined" Class="mb-3" T="string">
                <MudSelectItem Value="@(string.Empty)">All</MudSelectItem>
                @foreach (var type in transactionTypes)
                {
                    <MudSelectItem Value="@type">@type</MudSelectItem>
                }
            </MudSelect>

            <!-- Reset filters -->
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mb-3" OnClick="ResetFilters">
                Reset Filters
            </MudButton>

        </ToolBarContent>

        <!-- Datagrid columns -->
        <Columns>
            <PropertyColumn Property="x => x.Title" Sortable="true" />
            <PropertyColumn Property="x => x.Type" Sortable="true" />
            <PropertyColumn Property="x => x.Amount" Sortable="true" />
            <PropertyColumn Property="x => x.Date" Title="Date" Sortable="true" Format="D" />
            <PropertyColumn Property="x => x.Tag" Sortable="true" />
            <PropertyColumn Property="x => x.Notes" Sortable="true" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Transaction" PageSizeOptions="[5, 10, 15, 20]" />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

<!-- Form to add new transactions -->
<MudPaper Elevation="2" Class="p-4 mt-5">

    <!-- Form header -->
    <MudText Typo="Typo.h6" Class="mb-4">Add New Transaction</MudText>

    <!-- Input fields -->
    <EditForm Model="@transaction" OnValidSubmit="AddNewTransaction">
        <DataAnnotationsValidator />

        <MudGrid>
            <!-- Transaction Title -->
            <MudItem xs="12" sm="6">
                <MudTextField Label="Title" Variant="Variant.Outlined" @bind-Value="transaction.Title" Class="mb-3" Required="true" />
                <ValidationMessage For="@(() => transaction.Title)" />
            </MudItem>

            <!-- Transaction Type -->
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="@transaction.Type" Label="Type" Variant="Variant.Outlined" Class="mb-3" Required="true" >
                    @foreach (var type in transactionTypes)
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>
                <ValidationMessage For="@(() => transaction.Type)" />
            </MudItem>

            <!-- Transaction Amount -->
            <MudItem xs="12" sm="6">
                <MudNumericField Label="Amount" Variant="Variant.Outlined" @bind-Value="transaction.Amount" Class="mb-3" Required="true" />
                <ValidationMessage For="@(() => transaction.Amount)" />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p>@errorMessage</p>
                }
            </MudItem>

            <!-- Transaction Date -->
            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Date (If not selected, today's date will be used)" Variant="Variant.Outlined" 
                @bind-Date="transaction.Date" Class="mb-3" Required="true" />
                <ValidationMessage For="@(() => transaction.Date)" />
            </MudItem>

            <!-- Transaction Tag -->
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="@transaction.Tag" Label="Tag" Variant="Variant.Outlined" Class="mb-3" Required="true" >
                    <MudSelectItem Value="@(string.Empty)">Select a Tag</MudSelectItem>
                    @foreach (var tag in tags)
                    {
                        <MudSelectItem Value="@tag">@tag</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Transaction Notes -->
            <MudItem xs="12">
                <MudTextField Label="Notes (Optional)" Variant="Variant.Outlined" @bind-Value="transaction.Notes" Multiline="true" Rows="3" Class="mb-3" />
                <ValidationMessage For="@(() => transaction.Notes)" />
            </MudItem>
        </MudGrid>

        <!-- Add button -->
        <div class="text-end mt-3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-3 px-5">
                Add Transaction
            </MudButton>
        </div>
    </EditForm>
</MudPaper>


@code {
    private Transaction transaction = new();  // For the 'Add New Transaction' form
    
    private List<Transaction> transactions = new();  // For storing all existing transactions
    private List<string> tags = new();  // For storing all available tags
    private List<string> transactionTypes => TransactionService.GetAllTypes();  // For storing all availabe types (i.e., Debit and Credit)

    // For filtering
    private string _selectedType;  // For filtering by type
    private string _selectedTag;  // For filtering by tag

    // For checking to see if any filters are applied
    private bool isAnyFilterApplied => !string.IsNullOrEmpty(_selectedTag) || !string.IsNullOrEmpty(_selectedType);

    private string errorMessage;

    // For filtering transactions and storing them
    private List<Transaction> filteredTransactions
    {
        get
        {
            return transactions
                .Where(t => (string.IsNullOrEmpty(_selectedTag) || t.Tag == _selectedTag) &&
                            (string.IsNullOrEmpty(_selectedType) || t.Type == _selectedType))
                .ToList();
        }
    }

    // For resetting filters
    private void ResetFilters()
    {
        _selectedTag = string.Empty;
        _selectedType = string.Empty;
    }

    // Get the list of all transactions from the JSON file, and the list of available tags
    protected override void OnInitialized()
    {
        LoadTransactions();
        LoadTags();
    }

    // For adding a transaction
    private void AddNewTransaction()
    {
        // Calculate balance to check if enough left for outflow (debit)
        var balance = GetBalance();

        if (transaction.Type == "Debit")
        {
            if (balance >= transaction.Amount)
            {
                TransactionService.AddNewTransaction(transaction.Title,
                    transaction.Type,
                    transaction.Amount,
                    transaction.Date,
                    transaction.Tag,
                    transaction.Notes
                );

                // Reload transactions list
                LoadTransactions();

                // Reload tags list
                LoadTags();

                // Reset the form
                transaction = new();

                // Ensure UI is updated
                StateHasChanged();
            }
            else
            {
                errorMessage = "Insufficient balance.";
            }
        }
        else
        {
            TransactionService.AddNewTransaction(transaction.Title,
                transaction.Type,
                transaction.Amount,
                transaction.Date,
                transaction.Tag,
                transaction.Notes
            );

            // Reload transactions list
            LoadTransactions();

            // Reload tags list
            LoadTags();

            transaction = new();

            // Ensure UI is updated
            StateHasChanged();
        }
    }

    // Get a list of all transactions from the JSON file
    private void LoadTransactions()
    {
        transactions = TransactionService.GetAllTransactions().ToList();
    }

    // Get a list of all available tags
    private void LoadTags()
    {
        tags = TransactionService.GetAllTags().ToList();
    }

    // Calculate balance
    private float GetBalance()
    {
        var totalPendingDebt = DebtService.GetAllDebts().Where(d => d.IsPending).ToList().Sum(d => d.Amount);
        var totalInflows = TransactionService.GetAllTransactions().Where(t => t.Type == "Credit").Sum(t => t.Amount);
        var totalOutflows = TransactionService.GetAllTransactions().Where(t => t.Type == "Debit").Sum(t => t.Amount);
        var balance = totalInflows + totalPendingDebt - totalOutflows;

        return balance;
    }

}
